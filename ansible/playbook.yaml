---
# extra vars:
#   - required: domain_name: Your domain name (e.g., example.com)
#   - required: email_address: Your email address for Let's Encrypt notifications
#   - optional: auto_create_cert: true if you want to automatically create a Let's Encrypt certificate
# sample command: ansible-playbook playbook.yaml -e domain_name=do

- name: Install Nginx, Grafana, JMeter, and configure TLS for your domain name on Ubuntu
  hosts: gatewayserver
  become: true
  # vars:
  #   ansible_user: ansible_user  # The user for SSH
  #   ansible_ssh_private_key_file: "../ssh_keys/id_rsa"  # Specify your SSH private key path here

  tasks:

    - name: Ensure llm-ilb-svc entry exists in /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "10.0.1.111 llm-ilb-svc"
        state: present
        create: yes
        backup: yes

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Start and enable Nginx service
      systemd:
        name: nginx
        enabled: yes
        state: started

    - name: Create Nginx configuration for your domain
      become: true
      copy:
        dest: /etc/nginx/sites-enabled/{{ domain_name | replace('.', '-') }}.conf
        content: |
          {% if auto_create_cert is defined and auto_create_cert %}
          # HTTP server block (Port 80)
          server {
              listen 80;
              server_name {{ domain_name }};

              location / {
                  proxy_pass localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          {% else %}
          # Redirect HTTP to HTTPS (Port 80 to 443)
          server {
              listen 80;
              server_name {{ domain_name }};

              return 301 https://$host$request_uri;
          }

          # HTTPS server block (Port 443)
          server {
              listen 443 ssl;
              server_name {{ domain_name }};

              ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;

              location / {
                  proxy_pass localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          {% endif %}

    - name: Create directory for certificate if it does not exist
      when: auto_create_cert is not defined or not auto_create_cert
      file:
        path: /etc/letsencrypt/live/{{ domain_name }}
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy certificate and key file if auto_create_cert is false or does not exist
      when: auto_create_cert is not defined or not auto_create_cert
      copy:
        src: ../tls-cert/fullchain.pem
        dest: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
        owner: root
        group: root
        mode: '0644'

    - name: Copy key file if auto_create_cert is false or does not exist
      when: auto_create_cert is not defined or not auto_create_cert
      copy:
        src: ../tls-cert/privkey.pem
        dest: /etc/letsencrypt/live/{{ domain_name }}/privkey.pem
        owner: root
        group: root
        mode: '0600'
          
    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    # - name: Test Nginx configuration
    #   command: nginx -t

    # - name: Reload Nginx to apply configuration
    #   systemd:
    #     name: nginx
    #     state: reloaded

    - name: Install Certbot and Nginx plugin
      when: auto_create_cert is defined and auto_create_cert
      apt:
        name: 
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Obtain SSL certificate for {{ domain_name }} using Certbot
      command: certbot --nginx -d {{ domain_name }} --non-interactive --agree-tos -m {{ email_address }}
      when: auto_create_cert is defined and auto_create_cert

    - name: Test Nginx configuration after Certbot
      command: nginx -t

    - name: Reload Nginx to apply TLS configuration
      systemd:
        name: nginx
        state: reloaded

    ## Next 5 tasks are for testing purposes
    # Copy hello_world.py from local machine to remote server
    - name: Copy hello_world.py to the remote server
      copy:
        src: ../frontend/hello_world.py
        dest: /home/ubuntu/hello_world.py
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Install python3-pip
      become: true
      apt:
        name: python3-pip
        state: present

    # Install required Django packages
    - name: Install required Django packages
      pip:
        name:
          - django
        state: present
        executable: /usr/bin/pip3

    # Create a systemd service for the Django app
    - name: Create a systemd service for the Django app
      copy:
        dest: /etc/systemd/system/hello_world.service
        content: |
          [Unit]
          Description=Hello World Django Application
          After=network.target

          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu
          ExecStart=/usr/bin/python3 /home/ubuntu/hello_world.py runserver
          Restart=always

          [Install]
          WantedBy=multi-user.target

    # Enable the systemd service to start on boot
    - name: Enable the Django service
      systemd:
        name: hello_world.service
        enabled: yes
        state: started

    # - name: Install required dependencies for Grafana
    #   apt:
    #     name: apt-transport-https
    #     state: present

    # - name: Add Grafana GPG key
    #   apt_key:
    #     url: https://packages.grafana.com/gpg.key
    #     state: present

    # - name: Add Grafana APT repository
    #   apt_repository:
    #     repo: deb https://packages.grafana.com/oss/deb stable main
    #     state: present

    # - name: Install Grafana
    #   apt:
    #     name: grafana
    #     state: present

    # - name: Start and enable Grafana service
    #   systemd:
    #     name: grafana-server
    #     enabled: yes
    #     state: started

    # - name: Install JMeter
    #   apt:
    #     name: jmeter
    #     state: present
